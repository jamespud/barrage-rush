server:
  port: ${SERVER_PORT:8083}
  servlet:
    context-path: /
  tomcat:
    max-threads: 200
    max-connections: 10000

spring:
  application:
    name: barrage-rush-push-server
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      database: ${REDIS_DATABASE:0}
      timeout: 10000
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
          max-wait: -1
  rabbitmq:
    host: ${RABBITMQ_HOST:localhost}
    port: ${RABBITMQ_PORT:5672}
    username: ${RABBITMQ_USERNAME:guest}
    password: ${RABBITMQ_PASSWORD:guest}

# 连接服务配置
connection:
  serverId: 1
  serverAddress: localhost
  serverPort: 8082
  region: CENTRAL
  maxConnections: 10000
  heartbeatTimeout: 30000
  heartbeatInterval: 15000
  connectionTimeout: 5000
  messageBufferSize: 100
  messageSendInterval: 50
  redis:
    danmakuKeyPrefix:
      danmaku:room:
    danmakuExpire: 3600
    roomOnlineKeyPrefix:
      room:online:
    userSessionKeyPrefix:
      user:session:
    userSessionExpire: 3600
    heartbeatKeyPrefix:
      heartbeat:
    heartbeatExpire: 60

# 弹幕系统配置
barrage:
  # 集群配置
  cluster:
    # 实例类型
    instance-type: push-server
    # 资源类型
    resource-type: room
    # 实例ID（默认自动生成）
    instance-id: ${INSTANCE_ID:}
    # 心跳TTL（秒）
    heartbeat-ttl: 30
    # 虚拟节点数
    virtual-nodes: 128

# 推送服务器配置
push:
  # 服务器元数据
  server:
    # 服务器主机名（外部可访问）
    host: ${SERVER_HOST:localhost}
    # 服务器端口（外部可访问）
    port: ${SERVER_PORT:8083}
    # 服务器地区
    region: ${SERVER_REGION:default}
    # 服务器URL模式
    url-pattern: http://{host}:{port}/ws/room/{roomId}
  # WebSocket配置
  websocket:
    # 允许的源
    allowed-origins: ${WS_ALLOWED_ORIGINS:*}
    # WebSocket路径
    path: /ws/room/{roomId}
    # 启用集群检查
    cluster-check-enabled: true
  # 弹幕处理配置
  danmaku:
    # 弹幕队列TTL（秒）
    queue-ttl: 3600
    # 最大队列大小
    max-queue-size: 200
    # 是否向MQ广播弹幕
    broadcast-to-mq: true

# 日志配置
logging:
  level:
    root: INFO
    com.spud.barrage: DEBUG
    org.springframework.web.socket: INFO

# Actuator配置
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always

# application.yml
server:
  port: ${SERVER_PORT:8083}
  servlet:
    context-path: /

spring:
  application:
    name: barrage-rush-push-server
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      database: ${REDIS_DATABASE:0}
      password: ${REDIS_PASSWORD:}
  rabbitmq:
    host: ${RABBITMQ_HOST:localhost}
    port: ${RABBITMQ_PORT:5672}
    username: ${RABBITMQ_USERNAME:guest}
    password: ${RABBITMQ_PASSWORD:guest}

# 推送服务配置
push:
  # 服务器元数据
  server:
    host: ${SERVER_HOST:localhost}
    port: ${SERVER_PORT:8083}
    region: ${SERVER_REGION:CN}
    url-pattern: http://{host}:{port}/ws/room/{roomId}
  
  # WebSocket配置
  websocket:
    allowed-origins: ${WS_ALLOWED_ORIGINS:*}
    room-path: /ws/room/{roomId}
    danmaku-path: /ws/danmaku/{roomId}
    heartbeat-path: /ws/heartbeat/{roomId}
    proxy-path: /ws/proxy/{roomId}
    cluster-check-enabled: true
  
  # 弹幕处理配置
  danmaku:
    queue-ttl: 3600
    max-queue-size: 200
    broadcast-to-mq: true
    redis-key-prefix:
      danmaku:room:
    redis-ttl: 3600
    max-message-count: 200
  
  # 心跳配置
  heartbeat:
    timeout: 30000
    redis-key-prefix: "heartbeat:"
    redis-ttl: 60
  
  # CDN配置
  cdn:
    redis-key-prefix: "cdn:room:"
    redis-ttl: 3600

# 令牌配置
barrage:
  token:
    prefix: "ws:token:"
  
  # 消息队列配置
  mq:
    danmaku-exchange: danmaku.exchange
    danmaku-queue: danmaku.queue
    danmaku-routing-key: danmaku.routing
    notification-exchange: notification.exchange
    notification-queue: notification.queue
    notification-routing-key: notification.routing
  
  # 集群配置
  cluster:
    instance-type: push-server
    resource-type: room
    heartbeat-ttl: 30
    virtual-nodes: 128
    region: ${SERVER_REGION:CN}

# 日志配置
logging:
  level:
    root: INFO
    com.spud.barrage: DEBUG
    org.springframework.web.socket: INFO